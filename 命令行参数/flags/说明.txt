os.Args只是一个字符串切片，里面的类型都是字符串，不好处理
flag包可以定义参数类型，方便很多


flag只能接收以下几种类型。
    bool
    int系列(int，int64，uint，uint64)
    float系列(float，float64)
    string
    duration



定义flag参数，有三种方式
    1.通过flag.String(), Bool(), Int() 等flag.Xxx()方法，该种方式返回一个相应的指针
    2.通过flag.XxxVar()方法将flag绑定到一个变量，该种方式返回值类型
    3.通过flag.Var()绑定自定义类型，自定义类型需要实现Value接口(Receives必须为指针)

    定义的时候都会让你输入三个参数
        name        命令行参数的名称
        value       命令行参数的默认值
        usage       命令行参数的用途



调用flag.Parse()解析命令行参数到定义的flag
    flag.Parse()

    解析函数将会在碰到第一个非flag命令行参数时停止
    非flag命令行参数是指不满足命令行语法的参数
    如命令行参数为cmd --flag=true abc则第一个非flag命令行参数为“abc”

    从os.Args[1:]中解析注册的flag
    必须在flag都注册号而未访问其值执行
    要把所有参数都定义号，再执行flag.Parse一次即可，如果每次定义都执行
    只会识别第一个定义的参数，后面的参数都没有被定义到

    这个函数的调用，预示着程序中所有的参数定义完成。所以第二步看一下是不是有的参数后定义的，没有被解析
    这个Parse函数只能被执行一次，否则会异常，所以在很多包中为了避免异常，使用了先判断再执行的方式


    调用Parse解析后，就可以直接使用flag本身(指针类型)或者绑定的变量了(值类型)



命令行如何输入
    命令行语法主要有以下几种形式

    -flag        //只支持bool类型
    -flag=x
    -flag x     //只支持非bool类型


函数
    go标准库中，经常这么做：
    定义了一个类型，提供了很多方法
    为了方便使用，会实例化一个该类型的实例（通用）
    这样便可以直接使用该实例调用方法
    在 flag 包使用了有类似的方法
    比如 CommandLine 变量，只不过 flag 进行了进一步封装
        将 FlagSet 的方法都重新定义了一遍，也就是提供了一系列函数
        而函数中只是简单的调用已经实例化好了的 FlagSet 实例：CommandLine 的方法
        这样，使用者是这么调用：flag.Parse() 而不是 flag. CommandLine.Parse()
包管理误区
    源代码并不是一定要写在GOPATH/src的目录下
    如果你的源代码没有依赖任何第三方包，可以写在任何地方
    这样都是可以通过编译并运行的

    而GOPATH的主要作用是当你的源代码有需要第三方库时
    编译器需要知道这个第三方库的位置才能编译源代码
    所以go语言一开始是就是指定第三方库的位置是放在GOPATH的

    所以GOPATH存放的不是源代码的位置
    而是第三方库的位置

    即使你的源代码写在其他位置，并且引用了第三方包
    只要能在GOPATH中找到这个第三方包，就能编译和执行



包管理缺陷
    首先 go module 要做的就是摆脱GOPATH
    如果在任意一个目录里，写一个go的项目，依赖了某个第三方包，然后编译，肯定是报错的
    因为编译器在GOPATH目录下，并没有找到第三方包的地址，自然就会报错
    要解决这个错误也很简单，就是在GOPATH目录下，下载这个第三方包
    如果使用vendor或者dep，直接下载在vendor目录即可
    简单来说就是不够智能



去GOPATH发展
    在引入了vendor和dep等管理工具后
    你把源代码写在其他位置，所依赖的库也会跟着去其他位置
    即使是这样，编译器也能找到要依赖的库
    因为编译器会优先在项目的vendor目录下搜索依赖库

    所以在这时候，GOPATH 似乎不那么重要了
    在Go 1.8 版本中，如果开发者没有显式设置 GOPATH
    Go 会赋予 GOPATH 一个默认值


    这时，go官方引入了一种新的依赖管理工作模式
    这就是go module

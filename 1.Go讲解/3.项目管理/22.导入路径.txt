go mod 包管理说明
    首先把项目的根目录建在GOPATH之外
    然后执行 go mod init，进行项目初始化

    一个项目只能有一个go.mod
    这个go.mod最好是在项目的根目录下面
    一个项目能有多个包，这些包都不需要go.mod文件
    go.mod 文件是项目级别的，它会管理这些项目下的包

    然后就进行写代码
        1) 如果你的代码没有引用任何包，正常编译运行即可

        2) 如果你的代码用到标准库，也是正常编译运行即可
            因为标准库的源代码是在goRoot目录下的
            编译器会识别标准库的位置

        3) 如果你引用了第三方包，并且这个第三方包是能下载的
            go.mod 会记录你使用这个第三方包的版本
            这个第三方包的缓存目录是: GOPATH/pkg/mod ，这个目录也称为mod缓存目录
            如果能在mod目录里能找到要依赖的包，就不用下载了
            如果找不到，就需要通过 go get 下载，下载位置是mod目录
            mod目录里面的包是根据版本进行命名的，能区分不同版本的包
            编译器会去mod目录里面找源代码，只要能找到，就能编译运行

        4) 如果你引用了第三方包，并且这个包是不能正常的下载
            首先你需要解决的是如何拿到源代码
            如果是你自己的私有库，可以通过配置GOPRIVATE 下载第三方包
            go.mod和编译运行这些就不会有问题了

        5) 如果你引用的包是本项目下的包
            导入路径从go.mod的模块名开始写

        6) 如果是在模块下的子包引用本模块的外部包
            子目录中的导入路径会使用模块的导入路径 + 子目录路径的形式

        6)如果导入的不是一个项目下的包，并且这个包是在本地，没有发布出去
            需要在go.mod是使用replace指令
            语法：replace "包名" => "本项目的项目路径中找到要导入包的路径"

go module模式
    在该模式下，通常一个仓库的顶层目录下会放置一个 go.mod 文件
    每个 go.mod 文件唯一定义了一个 module

    一个 module 就是由一组相关包组成的一个独立的版本单元
    module 是有版本的，module 下的包也就有了版本属性
    而放置 go.mod 文件的目录被称为 module root 目录
    module root 目录以及其子目录下的所有 Go 包均归属于该 module (除了那些自身包含 go.mod 文件的子目录)

    通常的 Go 惯用法是一个仓库就定义一个 module
    在一个仓库中定义多个 module 的用法严重不建议使用

    在go module模式下，Go 编译器将不会在 GOPATH 下面以及 vendor 下面搜索目标程序依赖的第三方 Go 包



go module工作过程
    当编译文件是，go不会再去GOPATH 找要依赖的包
    而是重新下载并编译要依赖的包
    如果没有指定版本，编译器默认下载最新版本


    此时，go编译器会分析出项目依赖的包
    将其写入go.mod文件的require区域中
    如果发现，依赖包中还需要依赖其他包(也就是间接依赖)，也会写入go.mod文件中
    不过会在后面打上注释，表示间接依赖： // indirect


    Go 编译器将下载的依赖包缓存在 $GOPATH/pkg/mod 下面
    缓存包也是按照 “版本” 进行命名的，便于后续进行包构建使用
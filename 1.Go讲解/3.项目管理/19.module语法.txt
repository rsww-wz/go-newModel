module(模块)的概念
    module是一个相关Go包的集合
    它是源代码更替和版本控制的单元
    模块由源文件形成的go.mod文件的根目录定义
    包含go.mod文件的目录也被称为模块根


模块的理解
    模块就是module
    模块可以包含很多个包
    模块中使用到的第三方包(依赖),都由go.mod这个文件管理
    go.mod这个文件所在的根目录就是模块管理的范围，被称为模块根
    也就是管理这模块根下的所有包的依赖


go.mod语法
    module     指定包的名字（路径）
    require    指定的依赖项模块
    replace    可以替换依赖项模块
    exclude    可以忽略依赖项模块


    module
        module定义模块路径
        模块路径是导入包的路径前缀

        命名规范
            如果你的模块要给其他人使用
            那么命名规则 :github.com/github用户名/模块名
            因为这样，别人下载你的模块的时候，好方便管理

            如果你不打算发布出去的，或者有自己的管理方法的
            可以随意起名字，一般使用项目名


    require
        记录依赖的包，无论是直接依赖还是间接依赖
        如果是间接依赖，会在后面注释 redirect ，表示间接依赖

        给项目添加依赖有两种方法(写入require中)
            1.只要在项目中有 import，然后 go build ，go module 就会自动下载并添加
            2.自己手工使用 go get 下载安装后，会自动写入 go.mod

        一般无须改动，如果需要更新，也是通过mod命令，传输参数修改依赖版本的


    replace
        替换依赖项
        语法 : 源依赖项  =>  新依赖项

        由于在国内访问golang.org/x的各个包都需要翻墙
        可以在go.mod中使用replace替换成github上对应的库

        如果导入本地包，也需要使用替换指令
        语法 : 导入的本地模块/包 => 本go.mod的相对路径找到要导入的模块/包


    exclude
        忽略指定版本的依赖包


其他语法
    // 单行注释
    没有多行注释

    tag
        通常在发布软件的时候打一个tag，tag会记录版本的commit号
        是记录提交的一种方式，并不是版本号
        例如 : v1.0  ,  v2.3.4  , v0.0.9  这些都是tag

    如果没有tag
        则使用伪版本，这是一种版本语法
        专门用于标记没有 tag 的提交
        例如 : v0.0.0-20190603091049-60506f45cf65
            前面部分为语义化版本号，用于标记版本
            中间部分为 UTC 的提交时间，用于比较两个伪版本以其确定先后顺序
            后面部分是 commit 哈希的前缀，用于标记该版本位于哪个 commit




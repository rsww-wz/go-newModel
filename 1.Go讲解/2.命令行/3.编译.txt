go语言编译介绍
    Go语言的编译速度非常快
    Go 1.9 版本后默认利用Go语言的并发特性进行函数粒度的并发编译
    Go语言的程序编写基本以源码方式，无论是自己的代码还是第三方代码，并且以GOPATH作为工作目录和一套完整的工程目录规则
    因此Go语言中日常编译时无须像C++一样配置各种包含路径、链接库地址等
    Go语言中使用go build命令主要用于编译代码
    在包的编译过程中，若有必要，会同时编译与之相关联的包
    go build有很多种编译方法，如无参数编译、文件列表编译、指定包编译等，使用这些方法都可以输出可执行文件


作用
    1. 用于测试编译多个包或一个main包
    2. build命令编译包丢弃非main包编译结果，只是检查是否能够被编译
    3. 保留main包编译结果


语法指令
    go build [-o output] [-i] [build flags] [packages]

    go build本质上需要的是一个路径的，让编译器可以找到哪些需要编译的go文件
    packages其实是一个相对路径，是相对于我们定义的GOROOT和GOPATH这两个环境变量的
    所以有了packages这个参数后，go build就可以知道哪些需要编译的go文件了


编译参数
    -o           output,指定编译输出的名称，代替默认包名
    -i           install,安装作为目标的依赖关系的包(用于增量编译提速)

    编译标记
        -a	         强制重新构建
        -n	         打印编译时会用到的所有命令，但不真正执行
        -p n	     开启并发编译，默认情况下该值为CPU逻辑核数
        -race	     开启竞态检测
        -v	         编译时显示包名
        -x	         打印编译时会用到的所有命令
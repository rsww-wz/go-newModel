go test作用
    Go语言拥有一套单元测试和性能测试系统
    仅需要编写测试代码就可以快速测试一段需求代码
    性能测试系统可以给出代码的性能数据，帮助测试者分析性能问题


单元测试
    单元测试（unit testing），是指对软件中的最小可测试单元进行检查和验证
    对于单元测试中单元的含义，一般要根据实际情况去判定其具体含义
    如C语言中单元指一个函数，Java 里单元指一个类，图形化的软件中可以指一个窗口或一个菜单等

    总的来说，单元就是人为规定的最小的被测功能模块
    单元测试是在软件开发过程中要进行的最低级别的测试活动
    软件的独立单元将在与程序的其他部分相隔离的情况下进行测试


go语言测试分为两类
    单元测试        测试和验证代码的框架（测试代码的输出结果）
    基准测试        获得代码内存占用和运行效率的性能数据（测试代码的性能）

    每种测试都需要相应的测试源码文件


测试文件编写规则
    单元测试源码文件可以由多个测试用例组成
    每个测试用例函数需要以Test为前缀
    例如: func TestXXX( t *testing.T )

    测试用例文件不会参与正常源码编译，不会被包含到可执行文件中
    测试用例文件使用go test指令来执行，没有也不需要 main() 作为函数入口
    所有在以_test结尾的源码内以Test开头的函数会自动被执行
    测试用例可以不传入 *testing.T 参数


单元测试
    要开始一个单元测试，需要准备一个测试源码文件
    在命名文件时需要让文件必须以_test结尾
    默认的情况下，go test命令不需要任何的参数
    它会自动把你源码包下面所有 test 文件测试完毕，当然你也可以带上参数

    常用的参数：
        -bench regexp 执行相应的 benchmarks，例如 -bench=.
        -cover 开启测试覆盖率
        -run regexp 只运行 regexp 匹配的函数，例如 -run=Array 那么就执行包含有 Array 开头的函数
        -v 显示测试的详细命令


    单元测试分类
        1) 单元测试命令行
            最普通的单元测试
            测试函数只有一个测试用例

        2) 运行指定单元测试用例
            go test指定文件时默认执行文件内的所有测试用例
            可以使用-run参数选择需要的测试用例单独执行
            -run跟随的测试用例的名称支持正则表达式

        3) 标记单元测试结果
            当需要终止当前测试用例时，可以使用 FailNow

        4) 单元测试日志
            每个测试用例可以并发执行
            使用 testing.T 提供的日志输出可以保证日志跟随这个测试上下文一起打印输出
            testing.T 提供了几种日志输出方法
                Log	        打印日志，同时结束测试
                Logf	    格式化打印日志，同时结束测试
                Error	    打印错误日志，同时结束测试
                Errorf	    格式化打印错误日志，同时结束测试
                Fatal	    打印致命日志，同时结束测试
                Fatalf	    格式化打印致命日志，同时结束测试


基准测试
    基准测试可以测试一段程序的运行性能及耗费 CPU 的程度
    Go语言中提供了基准测试框架，使用方法类似于单元测试
    使用者无须准备高精度的计时器和各种分析工具
    基准测试本身即可以打印出非常标准的测试报告


    基准测试原理
        基准测试框架对一个测试用例的默认测试时间是 1 秒
        开始测试时，当以 Benchmark 开头的基准测试用例函数返回时还不到 1 秒
        那么 testing.B 中的 N 值将按 1、2、5、10、20、50……递增
        同时以递增后的值重新调用基准测试用例函数


    自定义测试时间
        通过-benchtime参数可以自定义测试时间


    测试内存
        基准测试可以对一段代码可能存在的内存分配进行统计
        可以分析申请了多少次内存等
        在命令行中添加-benchmem参数以显示内存分配情况


    控制计时器
        有些测试需要一定的启动和初始化时间
        如果从 Benchmark() 函数开始计时会很大程度上影响测试结果的精准性
        testing.B 提供了一系列的方法可以方便地控制计时器，从而让计时器只在需要的区间进行测试
        这些是在测试源码中写的
            // 重置计时器
            b.ResetTimer()

            // 停止计时器
            b.StopTimer()

            // 开始计时器
            b.StartTimer()


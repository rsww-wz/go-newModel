go get概述
    go get 命令可以借助代码管理工具通过远程拉取或更新代码包及其依赖包，并自动完成编译和安装

    这个命令可以动态获取远程代码包，目前支持的有 BitBucket、GitHub、Google Code 和 Launchpad
    在使用 go get 命令前，需要安装与远程包匹配的代码管理工具，如 Git、SVN、HG 等，参数中需要提供一个包名
    为了 go get 命令能正常工作，你必须确保安装了合适的源码管理工具，并同时把这些命令加入你的 PATH 中

    这个命令在内部实际上分成了两步操作：第一步是下载源码包，第二步是执行 go install
    下载源码包的 go 工具会自动根据不同的域名调用不同的源码工具



远程包的路径格式
    Go语言的代码被托管于 Github.com 网站，该网站是基于 Git 代码管理工具的
    其他类似的托管网站还有 code.google.com、bitbucket.org 等
    这些网站的项目包路径都有一个共同的标准
    例如：github.com/golang/go
        github.com    网站域名
        golang        作者或者机构
        go            项目名


go get + 远程包
    默认情况下，go get 可以直接使用
    想获取 go 的源码并编译，直接 go get + 远程包路径
    获取前，请确保 GOPATH 已经设置

    代码托管平台只是一个网络库，并没有可执行文件
    因此在 go get 操作成功后，GOPATH 下的 bin 目录下不会有任何编译好的二进制文件
    如果要下载并编译，需要指定参数


语法 ：go install [-i] [build flags] [packages]


参数
    -d	        只下载，不安装
    -v	        显示操作流程的日志及信息，方便检查错误

    -u	        用网络来更新已有代码包及其依赖包
                默认情况下，该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包
                下载丢失的包，但不会更新已经存在的包

    -t	        同时下载并安装指定代码包中的测试源码文件中依赖的代码包
    -fix	    让命令程序在下载代码包后先执行修正动作，而后再进行编译和安装

    -f	        仅在使用-u标记时才有效
                该标记会忽略掉对已下载代码包的导入路径的检查
                如果下载并安装的代码包所属的项目是你从别人那里Fork过来的，那么这样做就尤为重要了
                不让 -u 去验证 import 中的每一个都已经获取了，这对于本地 fork 的包特别有用

    -insecure	允许使用非安全的scheme（如HTTP）去下载指定的代码包
                如果你用的代码仓库（如公司内部的Gitlab）没有HTTPS支持，可以添加此标记



go install 和 go get
    go install 是把源码文件编译生成的文件放到指定的位置
    go get     下载指定的包，并将下载的包进行编译，然后安装到特定目录

    go get包括下载和安装，也就是包括go install
为什么需要跨平台
    如果每执行一次都需要编译一次
    那么成本会很高，而且很浪费时间
    特别是有些语言的编译时间很长

    所以都是把编译后的可执行文件发布出来
    但是这个可执行文件不是跨平台
    所以会看到，不同的平台有不同的安装包


不同语言的跨平台处理
    看似一样的源代码在不同的机器，不同的操作系统上，执行出来的结果都是一样的
    但是他们所生成的可执行文件的内容都是不一样的
    编译需要根据CPU类型，操作系统等信息编译出适合他们平台的可执行文件

    几乎所有的语言是跨平台的，但是编译器不是
    所以在不同的平台有不同类型的编译器

    Java跨平台机制
        中间有虚拟机，虚拟机中有许多标准，规定平台信息等
        它编译生成的是字节码，并不是可执行文件
        这个字节码是跨平台的
        字节码中预料的不同平台接口，当在不同平台运行时，在获取平台信息，生成该平台的可执行文件
        所以理论上是一次编译，到处执行，能做到跨平台

    C，C++
        他们都不是跨平台的
        需要把源代码拿到要执行的机器上
        再编译生成该平台的可执行文件


    Python，PHP，JavaScript等动态语言
        他们不需要编译，用的是解释器
        边解释，边执行
        所以只要他们的源代码是跨平台的，他们就能做到跨平台
        但是他们执行需要解释器，而这个解释器也不是跨平台的



什么是跨平台编译/交叉编译
    跨平台编译和交叉编译的概念是一个意思
    都是可以在任何一个开发平台上，编译出其他平台的可执行文件

    通常，可执行文件都是根据当前的机器生成的可执行文件
    而跨平台编译能在一个平台上就生成其他平台的可执行文件了，不需要实际的机器


go语言跨平台编译最重要的两个配置
    GOOS     目标操作系统
    GOARCH   目标处理器的架构

    编译生成的可执行文件就是根据这两个变量控制的
    当你要编译生成其他平台的可执行文件，根据平台和CPU修改这两个变量即可


GOOS支持10种操作系统
    darwin
    freebsd
    linux
    windows
    android
    dragonfly
    netbsd
    openbsd
    plan9
    solaris


GOARCH支持9种处理器架构
    arm
    arm64
    386
    amd64
    ppc64
    ppc64le
    mips64
    mips64le
    s390x

注
    AMD64 : 是PC端64 位CPU的架构总称
    ARM64 : 是Android 64位CPU架构总称
        骁龙，联发科，麒麟，苹果A系列，m系列，全部都是ARM64架构的


生成跨平台可执行文件指令
    例如：要生成Linux 64位的程序
    GOOS=linux GOARCH=amd64 go build main.go

    前面两个赋值，是更改环境变量
    这样的好处是只针对本次运行有效，不会更改我们默认的配置
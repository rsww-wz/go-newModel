go install结果
    将编译的中间文件放在 GOPATH 的 pkg 目录下
    以及固定地将编译结果放在 GOPATH 的 bin 目录下


go install作用
    go install用于编译并安装指定的代码包及它们的依赖包
    当指定的代码包的依赖包还没有被编译和安装时，该命令会先去处理依赖包


与go build比较
    与go build命令一样，传给go install命令的代码包参数应该以导入路径的形式提供
    并且，go build命令的绝大多数标记也都可以用于go install命令
    实际上，go install命令只比go build命令多做了一件事
    即：安装编译后的结果文件到指定目录


安装代码包
    如果go install 命令后跟的代码包中仅包含库源码文件
    那么go install 命令会把编译后的结果文件保存在源码文件所在工作区的pkg目录下
    对于仅包含库源码文件的代码包来说，这个结果文件就是对应的代码包归档文件（也叫静态链接库文件，名称以.a结尾）
    在非main包下，执行 go install 会生成 目录名.a 文件，保存在pkg 包下

    相比之下，我们在使用go build 命令对仅包含库源码文件的代码包进行编译时
    是不会在当前工作区的src目录以及pkg目录下产生任何结果文件的
    结果文件会出于编译的目的被生成在临时目录中
    但并不会使当前工作区目录产生任何变化

    如果我们在执行go install 命令时不后跟任何代码包参数
    那么命令将试图编译当前目录所对应的代码包

    执行go install 命令后会对指定代码包先编译再安装
    其中，编译代码包使用了与go build 命令相同的程序
    所以，执行go install 命令后也会首先建立一个名称以go-build为前缀的临时目录
    如果我们想强行重新安装指定代码包及其依赖包，那么就需要加入标记-a


安装命令源码文件
    除了安装代码包之外，go install命令还可以安装命令源码文件
    比如：项目名是project， 生成的project.exe结果会保存在工作区的 bin 目录下


go install 的编译过程有如下规律
    go install 是建立在 GOPATH 上的，无法在独立的目录里使用 go install
    GOPATH 下的 bin 目录放置的是使用 go install 生成的可执行文件，可执行文件的名称来自于编译时的包名
    go install 输出目录始终为 GOPATH 下的 bin 目录，无法使用-o附加参数进行自定义
    GOPATH 下的 pkg 目录放置的是编译期间的中间文件


总结
    go install 相当于执行go build 命令后，会进行安装（即进行 .a 文件 保存的过程）
    所以 go build 的好多命令，用于go install 也是通用的

    还有就是：只有在安装命令源码文件的时候，命令程序才会将环境变量GOBIN的值作为结果文件的存放目录
    而在安装库源码文件时，在命令程序内部的代表结果文件存放目录路径的那个变量不会被赋值
    最后，命令程序会发现它依然是个无效的空值
    所以，命令程序会同样返回一个关于“无安装位置”的错误

    这就引出一个结论，我们只能使用安装代码包的方式来安装库源码文件，而不能在go install命令罗列并安装它们
    另外，go install命令目前无法接受标记-o以自定义结果文件的存放位置
    这也从侧面说明了go install命令不支持针对库源码文件的安装操作